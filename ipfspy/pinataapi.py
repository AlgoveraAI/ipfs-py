# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_pinataapi.ipynb (unless otherwise specified).

__all__ = ['upload_file', 'pin', 'unpin', 'edit_hash', 'pin_policy', 'globalpin_policy', 'get_pinned_jobs',
           'get_pinned_files', 'get_datausage']

# Cell
#hide

import requests
import json

# Cell
#upload file
def upload_file(cred:str,#JWT key
                path:str #filepath
):

    base_url = 'https://api.pinata.cloud/pinning/pinFileToIPFS'

    header = {'Authorization': f'Bearer {cred}',
             'Content Type':'multipart/form-data'}

    f_bytes = {'file':open(path,'rb')}

    response = requests.post(base_url, headers=header,files=f_bytes)

    return response,response.json()

# Cell
#pin ipfs cid
def pin(cred:str,#JWT key
        cid:str, #IPFS cid
        fn=None, #Name of file
        pinataMetadata=None #Add keys and values associated with IPFS CID
):

    base_url = 'https://api.pinata.cloud/pinning/pinByHash'

    header = {'Authorization': f'Bearer {cred}'}

    data = {
                # The 'pinataMetadata' object will not be part of your content added to IPFS
                # Pinata simply stores the metadata provided to help you easily query the content you've pinned with Pinata
                'pinataMetadata': {
                    'name': fn,
                    'keyvalues': {}
                },
                'hashToPin': cid,


        }



    response = requests.post(base_url, headers=header,json=data)

    return response,response.json()

# Cell
#unpin ipfs cid
def unpin(cred:str,#JWT Key
          cid:str #IPFS CID
):

    base_url = 'https://api.pinata.cloud/pinning/unpin/'

    header = {'Authorization': f'Bearer {cred}'}

    params = {'hashToUnpin':cid}

    response = requests.delete(base_url + cid,headers=header,params=params)

    return response,response.status_code

# Cell
#edit metadata of cid
def edit_hash(cred:str,#JWT Key
              cid:str, #IPFS CID
              pinataMetaData=None #Add keys and values associated with IPFS CID
):

    base_url = 'https://api.pinata.cloud/pinning/hashMetadata'

    header = {'Authorization': f'Bearer {cred}'}

    data = pinataMetaData

    data['ipfsPinHash'] = cid

    response = requests.put(base_url, headers=header,json=data)

    return response,response.status_code

# Cell
#change pin policy of ipfs cid
def pin_policy(cred:str,#JWT Key
               cid:str, #IPFS CID
               replications=int, #Replication amount
               region='NYC1', #Region CID is pinned to either FRA1 or NYC1
):

    '''
    FRA1 - Frankfurt, Germany (max 2 replications)
    NYC1 - New York City, USA (max 2 replications)
    '''

    base_url = 'https://api.pinata.cloud/pinning/hashPinPolicy'

    header = {'Authorization': f'Bearer {cred}'}

    data = {'ipfsPinHash': cid,
            'newPinPolicy': {
                'regions':[{'id': region,'desiredReplicationCount': replications}]
            }
        }


    response = requests.put(base_url, headers=header,json=data)

    return response

# Cell
#set pin policy for all pins
def globalpin_policy(cred:str,#JWT Key
                     replications:int,#Replication amount
                     migratepins:bool,#Move pins from previous region to new region
                     region='NYC1'#Region CID is pinned to either FRA1 or NYC1
):

    '''
    FRA1 - Frankfurt, Germany (max 2 replications)
    NYC1 - New York City, USA (max 2 replications)
    '''

    base_url = 'https://api.pinata.cloud/pinning/userPinPolicy'

    header = {'Authorization': f'Bearer {cred}'}

    data = {
            'newPinPolicy': {
                'regions': [
                    {
                        'id': region,
                        'desiredReplicationCount': replications
                    },
                ],
                'migratePreviousPins':migratepins
            }
        }


    response = requests.put(base_url, headers=header,data=data)

    return response