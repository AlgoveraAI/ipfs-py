# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/estuaryapi.ipynb (unless otherwise specified).

__all__ = ['est_get_public_stats', 'est_get_viewer', 'est_upload', 'est_list_data', 'est_create_collection',
           'est_add_file_to_collection', 'list_pins', 'add_pin', 'get_pin', 'replace_pin', 'remove_pin', 'create_coll',
           'add_content', 'list_colls', 'list_coll_content', 'list_content_path', 'add_content_path', 'add_key',
           'add_data', 'add_cid', 'add_car', 'make_deal', 'add_data_cid', 'list_data', 'list_deals', 'get_deal_status',
           'get_node_stats', 'get_deal_data', 'get_miner_ask', 'get_failure_logs', 'get_deal_logs',
           'get_provider_stats', 'list_providers']

# Cell
def est_get_public_stats():
    return requests.get('https://api.estuary.tech/public/stats')

# Cell
def est_get_viewer(api_key):
    headers = {
    'Authorization': f'Bearer {api_key}',
    }

    response = requests.get('https://api.estuary.tech/viewer', headers=headers)
    return response

# Cell
def est_upload(api_key, path_to_file):
    headers = {
    'Authorization': f'Bearer {api_key}',
    # requests won't add a boundary if this header is set when you pass files=
    # 'Content-Type': 'multipart/form-data',
    }

    files = {
        'data': open('{path_to_file}', 'rb'),
    }

    response = requests.post('https://api.estuary.tech/content/add', headers=headers, files=files)
    return response

# Cell
def est_list_data(api_key):
    headers = {
    'Authorization': f'Bearer {api_key}',
    }

    response = requests.get('https://api.estuary.tech/content/list', headers=headers)
    return response

# Cell
# creating a collection
def est_create_collection(api_key, name, description):
    headers = {
    # Already added when you pass json= but not when you pass data=
    # 'Content-Type': 'application/json',
    'Authorization': f'Bearer {api_key}',
    }

    json_data = {
        'name': f'{name}',
        'description': f'{description}',
    }

    response = requests.post('https://api.estuary.tech/collections/create', headers=headers, json=json_data)

    # Note: json_data will not be serialized by requests
    # exactly as it was in the original request.
    #data = '{ "name": "My super nice new collection", "description": "This collection holds only the best content" }'
    #response = requests.post('https://api.estuary.tech/collections/create', headers=headers, data=data)
    return response

# Cell
# Adding a file to a collection
def est_add_file_to_collection(api_key, cids: list, collection: str):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {api_key}',
    }

    data = f'{ "contents": [], "cids": {cids}, "collection": {collection} }'

    response = requests.post('https://api.estuary.tech/collections/add-content', headers=headers, data=data)
    return response

# Cell
# list pins
def list_pins(api_key):
    headers = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {api_key}',
    }

    response = requests.get('https://api.estuary.tech/pinning/pins', headers=headers)
    return response.json()

# Cell
# add pin
def add_pin(api_key, name, cid):
    headers = {
    # Already added when you pass json= but not when you pass data=
    # 'Content-Type': 'application/json',
    'Authorization': f'Bearer {api_key}',
    }

    json_data = {
        'name': name,
        'cid': cid,
    }

    response = requests.post('https://api.estuary.tech/pinning/pins', headers=headers, json=json_data)
    return response.json()

# Cell
# get pin by ID
def get_pin(api_key, pin_id):
    headers = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {api_key}',
    }

    response = requests.get(f'https://api.estuary.tech/pinning/pins/{pin_id}', headers=headers)
    return response.json()

# Cell
# replace pin by ID
def replace_pin(api_key, pin_id):
    headers = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {api_key}',
    }

    response = requests.post(f'https://api.estuary.tech/pinning/pins/{pin_id}', headers=headers)
    return response.json()

# Cell
# remove pin by ID
def remove_pin(api_key, pin_id):
    headers = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {api_key}',
    }

    response = requests.delete(f'https://api.estuary.tech/pinning/pins/{pin_id}', headers=headers)
    return response.json()

# Cell
# create new collection
def create_coll(api_key, name, description):
    headers = {
    # Already added when you pass json= but not when you pass data=
    # 'Content-Type': 'application/json',
    'Authorization': f'Bearer {api_key}',
    }

    json_data = {
        'name': name,
        'description': description,
    }

    response = requests.post('https://api.estuary.tech/collections/create', headers=headers, json=json_data)
    return response.json()

# Cell
# add content
def add_content(api_key, collection_id):
    headers = {
    # Already added when you pass json= but not when you pass data=
    # 'Content-Type': 'application/json',
    'Authorization': f'Bearer {api_key}',
    }

    json_data = {
        'contents': [],
        'cids': [],
        'collection': collection_id,
    }

    response = requests.post('https://api.estuary.tech/collections/add-content', headers=headers, json=json_data)
    return response.json()

# Cell
# list collections
def list_colls(api_key):
    headers = {
    'Authorization': f'Bearer {api_key}',
    }

    response = requests.get('https://api.estuary.tech/collections/list', headers=headers)
    return response.json()

# Cell
# list collection content
def list_coll_content(api_key, collection_id):
    headers = {
    'Authorization': f'Bearer {api_key}',
    }

    response = requests.get(f'https://api.estuary.tech/collections/content/{collection_id}', headers=headers)
    return response.json()

# Cell
# FS list content of a path
def list_content_path(api_key, collection):
    headers = {
    'Authorization': f'Bearer {api_key}',
    }

    params = {
        'col': collection,
    }

    response = requests.get('https://api.estuary.tech/collections/fs/list', params=params, headers=headers)
    return response.json()

# Cell
# FS add content to path
def add_content_path(api_key, collection):
    headers = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {api_key}',
    }

    params = {
        'col': collection,
    }

    response = requests.post('https://api.estuary.tech/collections/fs/add', params=params, headers=headers)
    return response.json()

# Cell
# add client safe upload key
def add_key(api_key, expiry='24h'):
    headers = {
    'Authorization': f'Bearer {api_key}',
    'Accept': 'application/json',
    }

    params = {
        'perms': 'upload',
        'expiry': expiry,
    }

    response = requests.post('https://api.estuary.tech/user/api-keys', params=params, headers=headers)
    return response.json()

# Cell
# add data
def add_data(api_key, path_to_file):
    headers = {
    'Authorization': f'Bearer {api_key}',
    'Accept': 'application/json',
    # requests won't add a boundary if this header is set when you pass files=
    # 'Content-Type': 'multipart/form-data',
    }

    files = {
        'data': open(path_to_file, 'rb'),
    }

    response = requests.post('https://api.estuary.tech/content/add', headers=headers, files=files)
    return response.json()

# Cell
# add CID
def add_cid(api_key, name, root):
    headers = {
    # Already added when you pass json= but not when you pass data=
    # 'Content-Type': 'application/json',
    'Authorization': f'Bearer {api_key}',
    }

    json_data = {
        'name': name,
        'root': root,
    }

    response = requests.post('https://api.estuary.tech/content/add-ipfs', headers=headers, json=json_data)
    return response.json()

# Cell
# add CAR
def add_car(api_key, path_to_file):
    headers = {
    'Authorization': f'Bearer {api_key}',
    'Accept': 'application/json',
    }

    with open(path_to_file, 'rb') as f:
        data = f.read()

    response = requests.post('https://api.estuary.tech/content/add-car', headers=headers, data=data)
    return response.json()

# Cell
# make deal with specific provider
def make_deal(api_key):
    headers = {
    'Authorization': f'Bearer {api_key}',
    }

    json_data = {
        'content': content,
    }

    response = requests.post(f'https://api.estuary.tech/deals/make/{provider}', headers=headers, json=json_data)
    return response.json()

# Cell
# data by CID
def add_data_cid(api_key, cid: str):
    headers = {
    'Authorization': f'Bearer {api_key}',
    }

    response = requests.get(f'https://api.estuary.tech/content/by-cid/{cid}', headers=headers)
    return response.json()

# Cell
# list data
def list_data(api_key):
    headers = {
    'Authorization': f'Bearer {api_key}',
    }

    response = requests.get('https://api.estuary.tech/content/stats', headers=headers)
    return response.json()

# Cell
# list deals
def list_deals(api_key):
    headers = {
    'Authorization': f'Bearer {api_key}',
    }

    response = requests.get('https://api.estuary.tech/content/deals', headers=headers)
    return response.json()

# Cell
# get deal status by id
def get_deal_status(api_key, deal_id):
    headers = {
    'Authorization': f'Bearer {api_key}',
    }

    response = requests.get(f'https://api.estuary.tech/content/status/{deal_id}', headers=headers)
    return response.json()

# Cell
# get Estuary node stats
def get_node_stats():
    response = requests.get('https://api.estuary.tech/public/stats')
    return response.json()

# Cell
# get on chain deal data
def get_deal_data():
    response = requests.get('https://api.estuary.tech/public/metrics/deals-on-chain')
    return response.json()

# Cell
# get miner query ask
def get_miner_ask(id):
    response = requests.get(f'https://api.estuary.tech/public/miners/storage/query/{id}')
    return response.json()

# Cell
# get failure logs by provider
def get_failure_logs(id):
    response = requests.get(f'https://api.estuary.tech/public/miners/failures/{id}')
    return response.json()

# Cell
# get deal logs by provider
def get_deal_logs(provider_id):
    response = requests.get(f'https://api.estuary.tech/public/miners/deals/{provider_id}')
    return response.json()

# Cell
# get provider stats
def get_provider_stats(provider_id):
    response = requests.get(f'https://api.estuary.tech/public/miners/stats/{provider_id}')
    return response.json()

# Cell
# list providers
def list_providers():
    response = requests.get('https://api.estuary.tech/public/miners')
    return response.json()